{"version":3,"file":"static/js/181.73855132.chunk.js","mappings":"0KACA,GAAgB,QAAU,yBAAyB,eAAe,8BAA8B,OAAS,wBAAwB,cAAc,6BAA6B,OAAS,wBAAwB,gBAAgB,+BAA+B,OAAS,yB,8BCSxPA,EAA4C,SAACC,GACxD,IAAMC,EAAI,mBAAeD,EAAME,IAE/B,OACE,eAAIC,UAAS,UAAKC,EAAAA,QAAlB,UACE,UAAC,KAAD,CAASC,GAAIJ,EAAMK,gBAAiBF,EAAAA,OAAcD,UAAWC,EAAAA,eAA7D,WACE,gBAAKD,UAAWC,EAAAA,OAAhB,UACE,gBAAKG,IAAKP,EAAMQ,YAElB,0BAAOR,EAAMS,aCZRC,EAAsC,SAACV,GAClD,OAAO,eAAIG,UAAWC,EAAAA,QAAf,SAA+BJ,EAAMW,W,UCmBxCC,EAAuE,SAACZ,GAC5E,OACA,SAAC,KAAD,CACEa,cAAe,CACbC,eAAgB,IAElBC,SAAU,SAACC,GACT,IAAMC,EAAsC,GAM5C,OAJKD,EAAOF,iBACVG,EAAOH,eAAiB,YAGnBG,GAGTC,SAAU,SAACF,EAAD,GAAgC,IAArBG,EAAoB,EAApBA,cACnBC,QAAQC,IAAIL,GACZhB,EAAMkB,SAASF,GACfG,GAAc,IAjBlB,SAmBG,gBAAGG,EAAH,EAAGA,aAAcL,EAAjB,EAAiBA,OAAQM,EAAzB,EAAyBA,QAAzB,OACC,UAAC,KAAD,YACE,0BACE,gBAAKpB,UAAU,cAAf,UACE,SAAC,KAAD,CAAOqB,UAAU,WAAWf,KAAK,iBAAiBgB,YAAY,wBAAwBtB,UAAU,8BAGnGc,EAAOH,gBAAkBS,EAAQT,gBAAkBG,EAAOH,gBAE3D,mBAAQY,KAAK,SAASC,SAAUL,EAAhC,6B,mBCnCR,GAAeM,E,QAAAA,KAAuBC,EAAAA,EAAAA,KARd,SAACC,GACvB,MAAO,CACLC,QAASD,EAAME,YAAYD,QAC3BE,SAAUH,EAAME,YAAYC,SAC5BC,OAAQJ,EAAMK,KAAKD,UAIwC,CAAEE,WAAAA,EAAAA,IAAeC,EAAAA,EAAhF,EDfmD,SAACrC,GAClD,IAAMsC,EAAkBtC,EAAM+B,QAAQQ,KAAI,SAACC,GAAD,OACxC,SAACzC,EAAD,CAAYU,KAAM+B,EAAO/B,KAAMP,GAAIsC,EAAOtC,GAAIM,OAAQgC,EAAOhC,QAAagC,EAAOtC,OAG7EuC,EAAmBzC,EAAMiC,SAASM,KAAI,SAAC5B,GAAD,OAAkB,SAACD,EAAD,CAASC,QAASA,EAAQA,SAAcA,EAAQT,OAM9G,OACE,iBAAKC,UAAWC,EAAAA,QAAhB,WACE,eAAID,UAAWC,EAAAA,gBAAf,SAAuCkC,KACvC,eAAInC,UAAWC,EAAAA,iBAAf,SAAwCqC,KACxC,SAAC7B,EAAD,CAAgBM,SARD,SAACF,GAClBhB,EAAMoC,WAAWpB,EAAOF","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?dc1e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__DtIRT\",\"dialogs-list\":\"Dialogs_dialogs-list__VBiFh\",\"dialog\":\"Dialogs_dialog__6NNSC\",\"dialog-link\":\"Dialogs_dialog-link__-HD2t\",\"active\":\"Dialogs_active__V+9i9\",\"messages-list\":\"Dialogs_messages-list__TsWK7\",\"avatar\":\"Dialogs_avatar__Jwkg0\"};","import style from \"./../Dialogs.module.css\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport React from 'react';\r\n\r\ntype DialogItemPropsType = {\r\n  name: string;\r\n  id: number;\r\n  avatar: string;\r\n};\r\n\r\nexport const DialogItem: React.FC<DialogItemPropsType> = (props) => {\r\n  const path = `/dialogs/${props.id}`;\r\n\r\n  return (\r\n    <li className={`${style.dialog}`}>\r\n      <NavLink to={path} activeClassName={style.active} className={style['dialog-link']}>\r\n        <div className={style.avatar}>\r\n          <img src={props.avatar}/>\r\n        </div>\r\n        <span>{props.name}</span>\r\n      </NavLink>\r\n    </li>\r\n  );\r\n};\r\n","import style from \"./../Dialogs.module.css\";\nimport React from 'react';\n\ntype MessagePropsType = {\n  message: string;\n};\n\nexport const Message: React.FC<MessagePropsType> = (props) => {\n  return <li className={style.message}>{props.message}</li>;\n};\n","import style from './Dialogs.module.css'\r\nimport { DialogItem } from './DialogItem/DialogItem'\r\nimport { Message } from './Message/Message'\r\nimport React from 'react'\r\nimport { DialogsPropsType } from './DialogsContainer'\r\nimport { Field, Form, Formik } from 'formik'\r\n\r\nexport const Dialogs: React.FC<DialogsPropsType> = (props) => {\r\n  const dialogsElements = props.dialogs.map((dialog: any) => (\r\n    <DialogItem name={dialog.name} id={dialog.id} avatar={dialog.avatar} key={dialog.id} />\r\n  ))\r\n\r\n  const messagesElements = props.messages.map((message: any) => <Message message={message.message} key={message.id} />)\r\n\r\n  const addMessage = (values: FormDataType) => {\r\n    props.addMessage(values.newMessageText)\r\n  }\r\n\r\n  return (\r\n    <div className={style.dialogs}>\r\n      <ul className={style['dialogs-list']}>{dialogsElements}</ul>\r\n      <ul className={style['messages-list']}>{messagesElements}</ul>\r\n      <AddMessageForm onSubmit={addMessage} />\r\n    </div>\r\n  )\r\n}\r\n\r\nconst AddMessageForm: React.FC<{onSubmit: (values: FormDataType) => void}> = (props) => {\r\n  return (\r\n  <Formik\r\n    initialValues={{\r\n      newMessageText: '',\r\n    }}\r\n    validate={(values) => {\r\n      const errors: { newMessageText?: string } = {}\r\n\r\n      if (!values.newMessageText) {\r\n        errors.newMessageText = 'Required'\r\n      }\r\n\r\n      return errors\r\n    }}\r\n\r\n    onSubmit={(values, { setSubmitting }) => {\r\n      console.log(values)\r\n      props.onSubmit(values)\r\n      setSubmitting(false)\r\n    }}>\r\n    {({ isSubmitting, errors, touched }) => (\r\n      <Form>\r\n        <div>\r\n          <div className=\"new-message\">\r\n            <Field component=\"textarea\" name=\"newMessageText\" placeholder=\"Enter your message...\" className=\"new-message__textarea\" />\r\n          </div>\r\n        </div>\r\n        {errors.newMessageText && touched.newMessageText && errors.newMessageText}\r\n\r\n        <button type=\"submit\" disabled={isSubmitting}>\r\n          Add post\r\n        </button>\r\n      </Form>\r\n    )}\r\n  </Formik>\r\n  )\r\n}\r\n\r\n\r\n\r\ntype FormDataType = {\r\n  newMessageText: string\r\n}\r\n","import { addMessage, DialogsPageType } from '../../redux/dialogs-reducer'\r\nimport { Dialogs } from './Dialogs'\r\nimport { connect } from 'react-redux'\r\nimport { AppStateType } from '../../redux/store'\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect'\r\nimport { compose } from 'redux'\r\nimport { ComponentType } from 'react'\r\n\r\ntype MapDispatchToPropsReturnType = {\r\n  addMessage: (newMessageText: string) => void\r\n}\r\n\r\nexport type DialogsPropsType = MapDispatchToPropsReturnType & DialogsPageType & { isAuth: boolean }\r\n\r\nconst mapStateToProps = (state: AppStateType): DialogsPageType & { isAuth: boolean } => {\r\n  return {\r\n    dialogs: state.dialogsPage.dialogs,\r\n    messages: state.dialogsPage.messages,\r\n    isAuth: state.auth.isAuth,\r\n  }\r\n}\r\n\r\nexport default compose<ComponentType>(connect(mapStateToProps, { addMessage }), withAuthRedirect)(Dialogs)\r\n// compose - функция из Redux. Смысл: возьми Dialogs, передай в withAuthRedirect, затем результат передай в следующую функцию ()\r\n"],"names":["DialogItem","props","path","id","className","style","to","activeClassName","src","avatar","name","Message","message","AddMessageForm","initialValues","newMessageText","validate","values","errors","onSubmit","setSubmitting","console","log","isSubmitting","touched","component","placeholder","type","disabled","compose","connect","state","dialogs","dialogsPage","messages","isAuth","auth","addMessage","withAuthRedirect","dialogsElements","map","dialog","messagesElements"],"sourceRoot":""}